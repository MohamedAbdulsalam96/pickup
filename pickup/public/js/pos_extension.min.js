(function () {
	'use strict';

	// Copyright (c) 2018, Britlog and contributors
	// For license information, please see license.txt

	erpnext.pos.PointOfSale = erpnext.pos.PointOfSale.extend({

		make_customer: function (wrapper) {
			this._super(wrapper);
			this.list_customers_btn = this.page.wrapper.find('.list-customers-btn');
			this.list_customers_btn.after($('<button class="btn btn-default get-orders-btn" style="margin-left: 12px"><i class="octicon octicon-gift"></i></button>'));
			this.get_customer_orders();
		},

		get_customer_orders: function (wrapper) {
			var me = this;
			this.get_orders_btn = this.page.wrapper.find('.get-orders-btn');

			this.page.wrapper.on('click', '.get-orders-btn', function(wrapper) {
				me.customer_validate();

				frappe.call({
					method: 'pickup.pickup.doctype.pickup_slot.pickup_slot.get_items_from_sales_order',
					args: {
						'customer': me.frm.doc.customer,
						'pickup_slot': me.pos_profile_data.pickup_slot
					},
					callback: function(r) {
						//console.log(r.message);

						(r.message || []).forEach(function(row){
							me.items = me.get_items(row.item_code);
							me.add_to_cart();
							if (row.qty != 1) {
								me.update_qty(row.item_code, row.qty);
							}
							me.child.uom = row.uom;
							me.set_item_details(row.item_code, "rate", row.rate);
							me.update_value();
						});
					}
				});
	//			$(".get-orders-btn").prop("disabled",true);
			});
		},
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	erpnext.taxes_and_totals.prototype.calculate_outstanding_amount = function(update_paid_amount) {
		// NOTE:
		// paid_amount and write_off_amount is only for POS Invoice
		// total_advance is only for non POS Invoice

		if(this.frm.doc.doctype == "Sales Invoice" && this.frm.doc.is_return){
			this.calculate_paid_amount();
		}

		if(this.frm.doc.is_return || this.frm.doc.docstatus > 0) { return; }

		frappe.model.round_floats_in(this.frm.doc, ["grand_total", "total_advance", "write_off_amount"]);

		if(in_list(["Sales Invoice", "Purchase Invoice"], this.frm.doc.doctype)) {
			var grand_total = this.frm.doc.rounded_total || this.frm.doc.grand_total;

			if(this.frm.doc.party_account_currency == this.frm.doc.currency) {
				var total_amount_to_pay = flt((grand_total - this.frm.doc.total_advance
					- this.frm.doc.write_off_amount + this.frm.doc.balance_amount), precision("grand_total"));
			} else {
				var total_amount_to_pay = flt(
					(flt(grand_total*this.frm.doc.conversion_rate, precision("grand_total"))
						- this.frm.doc.total_advance - this.frm.doc.base_write_off_amount)
						+ this.frm.doc.balance_amount, precision("base_grand_total")
				);
			}

			frappe.model.round_floats_in(this.frm.doc, ["paid_amount"]);
			this.set_in_company_currency(this.frm.doc, ["paid_amount"]);

			if(this.frm.refresh_field){
				this.frm.refresh_field("paid_amount");
				this.frm.refresh_field("base_paid_amount");
			}

			if(this.frm.doc.doctype == "Sales Invoice") {
				this.set_default_payment(total_amount_to_pay, update_paid_amount);
				this.calculate_paid_amount();
			}
			this.calculate_change_amount();

			var paid_amount = (this.frm.doc.party_account_currency == this.frm.doc.currency) ?
				this.frm.doc.paid_amount : this.frm.doc.base_paid_amount;

			this.frm.doc.outstanding_amount =  flt(total_amount_to_pay - flt(paid_amount) +
				flt(this.frm.doc.change_amount * this.frm.doc.conversion_rate), precision("outstanding_amount"));
		}
	};

	erpnext.taxes_and_totals.prototype.calculate_change_amount = function(){
		this.frm.doc.change_amount = 0.0;
		this.frm.doc.base_change_amount = 0.0;
		if(this.frm.doc.doctype == "Sales Invoice"
			&& this.frm.doc.paid_amount > (this.frm.doc.grand_total + this.frm.doc.balance_amount)
			&& !this.frm.doc.is_return) {

			var payment_types = $.map(this.frm.doc.payments, function(d) { return d.type; });
			if (in_list(payment_types, 'Cash')) {
				var grand_total = this.frm.doc.rounded_total || this.frm.doc.grand_total;
				var base_grand_total = this.frm.doc.base_rounded_total || this.frm.doc.base_grand_total;

				this.frm.doc.change_amount = flt(this.frm.doc.paid_amount - grand_total +
					this.frm.doc.write_off_amount - this.frm.doc.balance_amount, precision("change_amount"));

				this.frm.doc.base_change_amount = flt(this.frm.doc.base_paid_amount -
					base_grand_total + this.frm.doc.base_write_off_amount -	this.frm.doc.balance_amount,
					precision("base_change_amount"));
			}
		}
	};

	erpnext.taxes_and_totals.prototype.calculate_write_off_amount = function(){
		if(this.frm.doc.paid_amount > this.frm.doc.grand_total){
			this.frm.doc.write_off_amount = flt(this.frm.doc.grand_total - this.frm.doc.paid_amount
				+ this.frm.doc.change_amount + this.frm.doc.balance_amount, precision("write_off_amount"));

			this.frm.doc.base_write_off_amount = flt(this.frm.doc.write_off_amount * this.frm.doc.conversion_rate,
				precision("base_write_off_amount"));
		}else{
			this.frm.doc.paid_amount = 0.0;
		}
		this.calculate_outstanding_amount(false);
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	// new function
	erpnext.payments.prototype.balance_amount = function(balance_amount) {

		this.frm.doc.balance_amount = flt(balance_amount, precision("balance_amount"));
		this.calculate_outstanding_amount(false);
		this.show_amounts();
	};

	erpnext.payments.prototype.get_customer_balance = function(customer) {
		var me = this;

		frappe.call({
			method: 'pickup.pickup.custom_classes.pos.get_customer_balance',
			args: {
				'customer': customer
			},
			callback: function(r) {
	//			console.log(r.message);

				var balance = flt(r.message);
				if (balance > 0)
					{ $(me.$body).find('#customer-balance-label').text(__("Solde (DÃ»)")); }
				else
					{ $(me.$body).find('#customer-balance-label').text(__("Solde (Avoir)")); }

				$(me.$body).find('#customer-balance').text(format_currency(balance, me.frm.doc.currency)).val(balance);
			}
		});
	};

	// override functions
	erpnext.payments.prototype.show_payment_details = function(){
		var me = this;
		var multimode_payments = $(this.$body).find('.multimode-payments').empty();
		if(this.frm.doc.payments.length){
			$.each(this.frm.doc.payments, function(index, data){
				$(frappe.render_template('payment_details', {
					mode_of_payment: data.mode_of_payment,
					amount: data.amount,
					idx: data.idx,
					currency: me.frm.doc.currency,
					type: data.type
				})).appendTo(multimode_payments);

				if (data.type == 'Cash' && data.amount == me.frm.doc.paid_amount) {
					me.idx = data.idx;
					me.selected_mode = $(me.$body).find(repl("input[idx='%(idx)s']",{'idx': me.idx}));
					me.highlight_selected_row();
					me.bind_amount_change_event();
				}
			});
		}else{
			$("<p>No payment mode selected in pos profile</p>").appendTo(multimode_payments);
		}

		//Get customer balance value
		me.get_customer_balance(me.frm.doc.customer);

	};

	erpnext.payments.prototype.set_outstanding_amount = function(){
		this.selected_mode = $(this.$body).find(repl("input[idx='%(idx)s']",{'idx': this.idx}));
		this.highlight_selected_row();
		this.payment_val = 0.0;
		if(this.frm.doc.outstanding_amount > 0 && flt(this.selected_mode.val()) == 0.0){
			//When user first time click on row
			this.payment_val = flt(this.frm.doc.outstanding_amount / this.frm.doc.conversion_rate, precision("outstanding_amount"));

			if(this.idx == 'balance_amount'){
				this.selected_mode.val(format_currency($(this.$body).find('#customer-balance').val(), this.frm.doc.currency));
			}else{
				this.selected_mode.val(format_currency(this.payment_val, this.frm.doc.currency));
				this.update_payment_amount();
			}

		}else if(flt(this.selected_mode.val()) > 0){
			//If user click on existing row which has value
			this.payment_val = flt(this.selected_mode.val());
		}
		this.selected_mode.select();
		this.bind_amount_change_event();
	};
		
	erpnext.payments.prototype.bind_form_control_event = function(){
		var me = this;
		$(this.$body).find('.pos-payment-row').click(function(){
			me.idx = $(this).attr("idx");
			me.set_outstanding_amount();
		});

		$(this.$body).find('.form-control').click(function(){
			me.idx = $(this).attr("idx");
			me.set_outstanding_amount();
			me.update_paid_amount(true);
		});

		$(this.$body).find('.write_off_amount').change(function(){
			me.write_off_amount(flt($(this).val()), precision("write_off_amount"));
		});

		$(this.$body).find('.change_amount').change(function(){
			me.change_amount(flt($(this).val()), precision("change_amount"));
		});

		$(this.$body).find('.balance_amount').change(function(){
			me.balance_amount(flt($(this).val()), precision("balance_amount"));
		});
	};

	erpnext.payments.prototype.update_paid_amount = function(update_write_off) {
		var me = this;
		if(in_list(['change_amount', 'write_off_amount', 'balance_amount'], this.idx)){
			var value = me.selected_mode.val();
			if(me.idx == 'change_amount'){
				me.change_amount(value);
			} else if(me.idx == 'write_off_amount'){
				if(flt(value) == 0 && update_write_off && me.frm.doc.outstanding_amount > 0) {
					value = flt(me.frm.doc.outstanding_amount / me.frm.doc.conversion_rate, precision(me.idx));
				}
				me.write_off_amount(value);
			} else {
				me.balance_amount(value);
			}
		}else{
			this.update_payment_amount();
		}
	};

	erpnext.payments.prototype.show_amounts = function(){
		$(this.$body).find(".write_off_amount").val(format_currency(this.frm.doc.write_off_amount, this.frm.doc.currency));
		$(this.$body).find('.paid_amount').text(format_currency(this.frm.doc.paid_amount, this.frm.doc.currency));
		$(this.$body).find('.change_amount').val(format_currency(this.frm.doc.change_amount, this.frm.doc.currency));
		$(this.$body).find('.outstanding_amount').text(format_currency(this.frm.doc.outstanding_amount, frappe.get_doc(":Company", this.frm.doc.company).default_currency));
		$(this.$body).find(".balance_amount").val(format_currency(this.frm.doc.balance_amount, this.frm.doc.currency));
		this.update_invoice();
	};

	frappe.templates['pos_payment'] = '<div class="pos_payment row">  <div class="row" style="padding: 0px 30px;">   <h3>{{ __("Total Amount") }}: <span class="label label-default" style="font-size:20px;padding:5px">{%= format_currency(grand_total, currency) %}</span></h3>  </div>  <div class="row amount-row">   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Paid") }} <h3 class="paid_amount">{%= format_currency(paid_amount, currency) %}</h3></p>   </div>   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Outstanding") }} <h3 class="outstanding_amount">{%= format_currency(outstanding_amount, currency) %} </h3></p>   </div>   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Change") }} <input class="form-control text-right change_amount bold" type="text" idx="change_amount" value="{{format_number(change_amount, null, 2)}}">    </p>   </div>   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Write off") }} <input class="form-control text-right write_off_amount bold" type="text" idx="write_off_amount" value="{{format_number(write_off_amount, null, 2)}}">    </p>   </div>  </div>  <hr>  <div class="row">   <div class="col-sm-6 ">    <div class ="row multimode-payments">    </div>    <br><br>    <div class ="row" style="padding: 0px 50px;">     <p id="customer-balance-label" class="amount-label"></p>     <h3 id="customer-balance"></h3>     <p class="amount-label"> {{ __("RÃ©gularisation") }} <input class="form-control text-right balance_amount bold" type="text" idx="balance_amount" value="{{format_number(balance_amount, null, 2)}}"></p>    </div>   </div>   <div class="col-sm-6 payment-toolbar">    {% for(var i=0; i<3; i++) { %}     <div class="row">      {% for(var j=i*3; j<(i+1)*3; j++) { %}       <button type="button"  class="btn btn-default pos-keyboard-key">{{j+1}}</button>      {% } %}     </div>    {% } %}    <div class="row">     <button type="button"  class="btn btn-default delete-btn">{{ __("Del") }}</button>     <button type="button"  class="btn btn-default pos-keyboard-key">0</button>     <button type="button"  class="btn btn-default pos-keyboard-key">.</button>    </div>         </div>  </div> </div> ';

}());
//# sourceMappingURL=pos_extension.min.js.map
